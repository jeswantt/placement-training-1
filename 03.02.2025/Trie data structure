#include <stdio.h>
#include <stdlib.h>

#define ALPHABET_SIZE 26

struct TrieNode {
    struct TrieNode* children[ALPHABET_SIZE];
    int isEndOfWord;
};

struct TrieNode* getNode() {
    struct TrieNode* node = (struct TrieNode*)malloc(sizeof(struct TrieNode));
    node->isEndOfWord = 0;
    for (int i = 0; i < ALPHABET_SIZE; i++) node->children[i] = NULL;
    return node;
}

void insert(struct TrieNode* root, char* key) {
    struct TrieNode* pCrawl = root;
    while (*key) {
        int index = *key - 'a';
        if (!pCrawl->children[index]) pCrawl->children[index] = getNode();
        pCrawl = pCrawl->children[index];
        key++;
    }
    pCrawl->isEndOfWord = 1;
}

int search(struct TrieNode* root, char* key) {
    struct TrieNode* pCrawl = root;
    while (*key) {
        int index = *key - 'a';
        if (!pCrawl->children[index]) return 0;
        pCrawl = pCrawl->children[index];
        key++;
    }
    return pCrawl->isEndOfWord;
}

int main() {
    struct TrieNode* root = getNode();
    insert(root, "hello");
    printf(search(root, "hello") ? "Found\n" : "Not Found\n");
    printf(search(root, "world") ? "Found\n" : "Not Found\n");
    return 0;
}
