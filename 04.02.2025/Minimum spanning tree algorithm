#include <stdio.h>
#include <stdlib.h>

struct Edge {
    int src, dest, weight;
};

struct Graph {
    int V, E;
    struct Edge* edge;
};

struct Graph* createGraph(int V, int E) {
    struct Graph* graph = (struct Graph*)malloc(sizeof(struct Graph));
    graph->V = V;
    graph->E = E;
    graph->edge = (struct Edge*)malloc(E * sizeof(struct Edge));
    return graph;
}

int compare(const void* a, const void* b) {
    return ((struct Edge*)a)->weight - ((struct Edge*)b)->weight;
}

int find(int parent[], int i) {
    return parent[i] == -1 ? i : (parent[i] = find(parent, parent[i]));
}

void unionSet(int parent[], int x, int y) {
    int xset = find(parent, x), yset = find(parent, y);
    if (xset != yset) parent[xset] = yset;
}

void kruskalMST(struct Graph* graph) {
    qsort(graph->edge, graph->E, sizeof(graph->edge[0]), compare);
    int parent[graph->V];
    for (int i = 0; i < graph->V; i++) parent[i] = -1;

    printf("Edges in MST:\n");
    for (int i = 0, e = 0; e < graph->V - 1 && i < graph->E; i++) {
        int u = graph->edge[i].src, v = graph->edge[i].dest;
        if (find(parent, u) != find(parent, v)) {
            printf("%d - %d\n", u, v);
            unionSet(parent, u, v);
            e++;
        }
    }
}

int main() {
    int V = 4, E = 5;
    struct Graph* graph = createGraph(V, E);
    graph->edge[0] = (struct Edge){0, 1, 10};
    graph->edge[1] = (struct Edge){0, 2, 6};
    graph->edge[2] = (struct Edge){0, 3, 5};
    graph->edge[3] = (struct Edge){1, 3, 15};
    graph->edge[4] = (struct Edge){2, 3, 4};

    kruskalMST(graph);
    return 0;
}
